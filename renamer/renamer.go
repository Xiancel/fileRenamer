package renamer

import (
	mod "filerenamer/model"
	"fmt"
	"os"
	"path/filepath"
	"strings"
)

// –ø–æ—à—É–∫ —Ñ–∞–π–ª—ñ–≤ –≤ –¥–µ—Ä–µ–∫—Ç–æ—Ä—ñ—ó
func FindFile(directory string) ([]string, error) {
	// –∑–º—ñ–Ω–Ω–∞ –¥–ª—è –∑–±–µ—Ä–µ–≥–∞–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤
	files, err := filepath.Glob(directory)
	if err != nil {
		return nil, err
	}
	return files, nil
}

// –∑–º—ñ–Ω–Ω–∞ –Ω–∞–∑–≤–∏ —Ñ–∞–π–ª—É
func RenameFile(pattern, action, value string) ([]mod.RenameResult, error) {
	// –ø–æ—à—É–∫ —Ñ–∞–π–ª—ñ–≤
	files, err := FindFile(pattern)
	if err != nil {
		return nil, err
	}

	// –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥—ñ—Ä–µ–∫—Ç–æ—Ä—ñ—ó –Ω–∞ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å —Ñ–∞–π–ª—ñ–≤
	if len(files) == 0 {
		fmt.Println("\n‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª—ñ–≤ —É –¥–µ—Ä–µ–∫—Ç–æ—Ä—ñ—ó")
	} else {
		fmt.Printf("\nüîç –ó–Ω–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª—ñ–≤: %d\n\n", len(files))
	}
	// –∑–º—ñ–Ω–Ω–∞ –¥–ª—è —Ö—Ä–∞–Ω–Ω—ñ–Ω—è –ø—Ä–∞–≤–∏–ª –Ω–∞ –æ—Å–Ω–æ–≤—ñ –≤–∏–±–æ—Ä—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º
	rule := actions(action, value)
	// –∑–º—ñ–Ω–Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É –∑–º—ñ–Ω–∏
	result := make([]mod.RenameResult, 0, len(files))
	count := 0

	// –∑–º—ñ–Ω–∞ —Ñ–∞–π–ª—ñ–≤
	for _, file := range files {
		// –≤–∏–∑–æ–≤ —Ñ—É–Ω–∫—Ü—ñ—ó –∑–º—ñ–Ω–Ω–∏
		res, err := rename(file, rule)
		// –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –ø–æ–º–∏–ª–∫—É
		if err != nil {
			res = mod.RenameResult{
				OldName: file,
				NewName: "",
				Success: false,
				Error:   err,
			}
		}
		// –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ñ–∞–π–ª—É –¥–æ –∑–º—ñ–Ω–Ω–∏ result
		result = append(result, res)
		oldName := filepath.Base(res.OldName)
		newName := filepath.Base(res.NewName)

		fmt.Printf("%s - %s\n", oldName, newName)
		if res.Success {
			count++
		}
	}
	if count > 0 {
		fmt.Printf("\n‚úÖ –£—Å–ø—ñ—à–Ω–æ –ø–µ—Ä–µ–π–º–µ–Ω–æ–≤–∞–Ω–æ: %d —Ñ–∞–π–ª–∏(—ñ–≤)\n", count)
	}

	return result, nil
}

// —Ñ—É–Ω–∫—Ü—ñ—è –≤–∏–±–æ—Ä—É –¥—ñ—ó
func actions(action, value string) mod.Rule {
	// –∑–º—ñ–Ω–Ω–∞ –¥–ª—è —Ö—Ä–∞–Ω—ñ–Ω–Ω—è –ø—Ä–∞–≤–∏–ª –¥—ñ—ó
	var rule mod.Rule

	// –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤–∏–±–æ—Ä—É –¥—ñ—ó —ñ –ø–µ—Ä–µ–¥–∞–≤–∞–Ω–Ω—è —ó—ó –¥–æ –∑–º—ñ–Ω–Ω–∏
	switch action {
	case "prefix":
		rule.Prefix = value
	case "suffix":
		rule.Suffix = value
	case "replace":
		parts := strings.SplitN(value, " ", 2)
		if len(parts) == 2 {
			rule.Replace = mod.ReplaceRule{
				From: parts[0],
				To:   parts[1],
			}
		}
	case "extension":
		rule.Extension = value
	case "lowercase":
		rule.Lowercase = true
	case "uppercase":
		rule.Uppercase = true
	}

	// –ø–æ–≤–µ—Ä—Ç–∞—î –≤–∏–±—ñ—Ä –¥—ñ—î
	return rule
}

// —Ñ—É–Ω–∫—Ü—ñ—è –ø–µ—Ä–µ–π–º–µ–Ω—É–≤–∞–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤
func rename(path string, rule mod.Rule) (mod.RenameResult, error) {
	// –∑–º—ñ–Ω–Ω–∏ –¥–ª—è —Ö—Ä–∞–Ω–Ω—ñ–Ω–Ω—è
	dir := filepath.Dir(path)      // –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó
	oldName := filepath.Base(path) // —Å—Ç–∞—Ä–æ–≥–æ —ñ–º–µ–Ω—ñ —Ñ–∞–π–ª—É
	newName := oldName             // –Ω–æ–≤–æ–≥–æ —ñ–º–µ–Ω—ñ —Ñ–∞–π–ª—É

	// –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ –∑–º—ñ–Ω–Ω–∞ —ñ–º–µ–Ω—ñ —Ñ–∞–π–ª—ñ–≤ –ø–æ –ø—Ä–∞–≤–∏–ª—É –¥—ñ—ó –≤–∏–±—Ä–∞–Ω–µ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º

	if rule.Prefix != "" {
		newName = rule.Prefix + newName
	}

	if rule.Suffix != "" {
		ext := filepath.Ext(newName)
		name := strings.TrimSuffix(newName, ext)
		newName = name + rule.Suffix + ext
	}

	if rule.Replace.From != "" {
		newName = strings.ReplaceAll(newName, rule.Replace.From, rule.Replace.To)
	}

	if rule.Extension != "" {
		ext := filepath.Ext(newName)
		name := strings.TrimSuffix(newName, ext)
		newName = name + "." + rule.Extension
	}

	if rule.Lowercase {
		ext := filepath.Ext(newName)
		name := strings.TrimSuffix(newName, ext)
		name = strings.ToLower(name)
		newName = name + ext
	}

	if rule.Uppercase {
		ext := filepath.Ext(newName)
		name := strings.TrimSuffix(newName, ext)
		name = strings.ToUpper(name)
		newName = name + ext
	}

	newName = strings.TrimSpace(newName)
	newName = filepath.Base(newName)
	// –∑–º—ñ–Ω–Ω–∞ –¥–ª—è —Ö—Ä–∞–Ω—ñ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –ø—É—Ç—ñ —Ñ–∞–π–ª—É
	newPath := filepath.Join(dir, newName)
	// –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ —Å–æ–≤–ø–∞–¥—ñ–Ω–Ω—è —Å—Ç–∞—Ä–æ–≥–æ –ø—É—Ç—ñ —ñ –Ω–æ–≤–æ–≥–æ
	if path == newPath {
		return mod.RenameResult{
			OldName: path,
			NewName: newPath,
			Success: true,
			Error:   nil,
		}, nil
	}

	// –ø–µ—Ä–µ–π–º–µ–Ω—ñ–≤–∞–Ω–Ω—è —Ñ–∞–π–ª—É
	err := os.Rename(path, newPath)
	// –∑–º—ñ–Ω–Ω–∞ –¥–ª—è —ñ–Ω—ñ—Ü—ñ–∞–ª—å–∑–∞—Ü—ñ—ó —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
	result := mod.RenameResult{
		OldName: path,
		NewName: newPath,
		Success: err == nil,
		Error:   err,
	}

	// –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –∑–º—ñ–Ω–µ–Ω–æ–≥ —Ñ–∞–π–ª—É
	return result, err
}
